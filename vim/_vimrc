" Vi Nocompatible {{{
set nocompatible
" }}}

" Load Plugins {{{
if !filereadable(expand('~/.vim/autoload/plug.vim'))
    let s:first_init = 1
endif

" Install vim-plug
if exists("s:first_init")
    echom 'Plugin manager: vim-plug has not been installed. Try to install...'
    exec 'silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs '.
            \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    echom 'Installing vim-plug complete.'
endif

call plug#begin('~/.vim/plugged')

Plug 'dyng/auto_mkdir'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'junegunn/fzf'
Plug 'scrooloose/nerdtree'
Plug 'easymotion/vim-easymotion'
Plug 'thinca/vim-quickrun'
Plug 'mbbill/undotree'
Plug 'andymass/vim-matchup'
Plug 'machakann/vim-sandwich'
Plug 'preservim/tagbar'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'vim-scripts/Rename'
Plug 'xolox/vim-session' | Plug 'xolox/vim-misc'
Plug 'junegunn/vim-easy-align'
Plug '~/Dropbox/Projects/CtrlSF'
Plug '~/Dropbox/Projects/formatiu.vim'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'mg979/vim-visual-multi'
Plug 'inkarkat/vim-mark' | Plug 'inkarkat/vim-ingo-library'
Plug 'tpope/vim-rsi'
Plug 'tommcdo/vim-exchange'
Plug 'AndrewRadev/linediff.vim'
Plug 'vim-scripts/ReloadScript'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'w0rp/ale'
Plug 'Raimondi/delimitMate'
Plug 'tomtom/tcomment_vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'dhruvasagar/vim-table-mode'
Plug 'ludovicchabant/vim-gutentags'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': 'markdown' }
Plug 'ryanoasis/vim-devicons'
Plug 'sheerun/vim-polyglot'
Plug 'puremourning/vimspector', { 'do': './install_gadget.py --enable-python' }
Plug 'skywind3000/vim-terminal-help'
Plug 'Chiel92/vim-autoformat'

" Language Specific Plugins
Plug 'guns/vim-sexp'
Plug 'phildawes/racer'
Plug '~/Dropbox/Projects/dejava.vim'
Plug 'nathangrigg/vim-beancount'

" Colorschemes
Plug 'tomasr/molokai'
Plug 'w0ng/vim-hybrid'
Plug 'nanotech/jellybeans.vim'
Plug 'joshdick/onedark.vim'
Plug 'ajmwagar/vim-dues'
Plug 'rakr/vim-one'
Plug 'chriskempson/base16-vim'

" Documents
Plug 'yianwillis/vimcdoc'

call plug#end()

" Install all plugins
if exists("s:first_init")
    PlugInstall
endif
" }}}

" Basic Config {{{
" Encoding & Language {{{
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,sjis,cp936,gb18030,big5,euc-jp,euc-kr,latin1
language message zh_CN.UTF-8
" }}}

" Spelling Check {{{
" default setting
set nospell

function! s:InitSpellingCheck(lang)
    setl spell
    exec "setl spelllang=" . a:lang
endfunction

augroup spelling
    autocmd!
    autocmd FileType text,markdown call s:InitSpellingCheck("en_us")
augroup END
" }}}

" Indentation {{{
set magic
set ruler
set autoindent
set tabstop=8
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab
set display=lastline
" }}}

" Search {{{
set incsearch
set ignorecase
set smartcase
" }}}

" UI {{{
set backspace=indent,eol,start
set guioptions=
set hlsearch
set showmatch
set laststatus=2

set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%
autocmd FileType git*,help setlocal nolist

" Colorscheme
set t_Co=256
set background=dark
colorscheme onedark

" Font
if has('gui_macvim')
    set guifont=Blex\ Mono\ Light\ Nerd\ Font\ Complete\ Mono:h15,Inconsolata\ Nerd\ Font\ Mono:h18,Menlo-Regular:h15,Monaco:h14
elseif has('win32')
    set guifont=Consolas:h12
else
    set guifont=Monospace\ 12
endif
" }}}

" Buffer {{{
set hidden
" }}}

" Syntax {{{
syntax on
filetype plugin indent on
set modeline                 "modeline is by default disabled on Debian
set completeopt=longest,menu
set wildmenu
" }}}

" Completion Map {{{
inoremap <silent><expr> <Space> pumvisible() ? "\<C-Y>\<Space>" : "\<Space>"
inoremap <silent><expr> <CR>    pumvisible() ? "\<C-Y>\<CR>"    : "\<CR>"
inoremap <silent><expr> <Esc>   pumvisible() ? "\<C-Y>\<Esc>"   : "\<Esc>"
inoremap <silent><expr> <C-C>   pumvisible() ? "\<C-E>"         : "\<C-C>"
" }}}

" Maps {{{
let mapleader = ","

" Move line start and end
noremap H ^
noremap L $
inoremap <Home> <C-O>g^
inoremap <End>  <c-O>g$
" Quick paging
nnoremap <Space> <C-D>
vnoremap <Space> <C-D>
" Copy to line end
nnoremap Y y$
" Cursor move
nnoremap <Down> gj
nnoremap <Up>   gk
inoremap <Down> <C-R>=pumvisible() ? "\<lt>Down>" : "\<lt>C-O>gj"<CR>
inoremap <Up>   <C-R>=pumvisible() ? "\<lt>Up>" : "\<lt>C-O>gk"<CR>

" Tab navigation
nnoremap <silent> <C-Tab> :tabnext<CR>

" Window switch
nnoremap <silent> <C-H> :wincmd h<CR>
nnoremap <silent> <C-J> :wincmd j<CR>
nnoremap <silent> <C-K> :wincmd k<CR>
nnoremap <silent> <C-L> :wincmd l<CR>
" Focus new splited window
nnoremap <silent> <C-W>s :wincmd s\|wincmd j<CR>
nnoremap <silent> <C-W>v :wincmd v\|wincmd l<CR>

" Nohlsearch
nnoremap <silent> <F2>      :nohlsearch \| call ClearHighlightLines()<CR>
inoremap <silent> <F2> <C-O>:nohlsearch \| call ClearHighlightLines()<CR>
" n always look forward && N always look backward
nnoremap <expr> n v:searchforward ? "n" : "N"
nnoremap <expr> N v:searchforward ? "N" : "n"

" Shift lines leftwards or rightwards
vnoremap <expr> > v:count ? ">" : ">gv"
vnoremap <expr> < v:count ? "<" : "<gv"

" Win-style copy&paste shortcuts
xnoremap <C-C> "+y
nnoremap <C-Q> "+p
inoremap <C-Q> <C-R>+
cnoremap <C-Q> <C-R>+
" Copy filename
nnoremap <silent> yf :let @+ = expand('%')<CR>
nnoremap <silent> yF :let @+ = expand('%:p')<CR>
" Run current line
nnoremap <silent> yr :exec getline('.') \| echo 'executed!'<CR>
" Shell-style shortcut in command mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-d> <Del>
cnoremap <C-h> <BackSpace>

" Auto unfolding
nnoremap n nzv
nnoremap N Nzv

" Quickfix mode
nnoremap <silent><expr> ej        empty(getloclist(0)) ? ":cnext\<CR>" : ":lnext\<CR>"
nnoremap <silent><expr> ek        empty(getloclist(0)) ? ":cprev\<CR>" : ":lprev\<CR>"
nnoremap <silent><expr> <leader>e empty(getloclist(0)) ? ":cwind\<CR>" : ":lwind\<CR>"

" Correct spell
cab Q q
cab Qa qa
cab W w
cab Wq wq
cab Wa wa
cab X x
" }}}

" Terminal {{{
" }}}

" Misc {{{
" use option key as meta key in MacVim
if has('gui_macvim')
    set macmeta
endif
" disable beeping
set vb t_vb=

" fix broken arrow keys inside console
if !has('gui_running')
    map <silent> <ESC>OA <UP>
    map <silent> <ESC>OB <DOWN>
    map <silent> <ESC>OC <RIGHT>
    map <silent> <ESC>OD <LEFT>
    map <silent> <Esc>OP <F1>
    map <silent> <Esc>OQ <F2>
    map <silent> <Esc>OR <F3>
    map <silent> <Esc>OS <F4>
    map <silent> <Esc>[16~ <F5>
    map <silent> <Esc>[17~ <F6>
    map <silent> <Esc>[18~ <F7>
    map <silent> <Esc>[19~ <F8>
    map <silent> <Esc>[20~ <F9>
    map <silent> <Esc>[21~ <F10>
    map <silent> <Esc>[23~ <F11>
    map <silent> <Esc>[24~ <F12>
endif

" ignore python3 warning
silent! py3 pass

" add keyword '-'
augroup filetyeSpecKeyword
    au!
    au FileType help setl iskeyword+=-
    au FileType vim setl iskeyword+=# iskeyword+=:
augroup END

" persistent undo
if has("persistent_undo")
    if has('win32')
        exec "set undodir='" . $HOME . "\_vim-infos\undodir'"
    else
        exec "set undodir='" . $HOME . "/.vim-infos/undodir'"
    endif
    set undofile
endif

" paste mode
set pastetoggle=<F8>
" }}}
" }}}

" Custom Functions {{{
" Highlight current line {{{
function! ToggleHighlightCurrentLine()
    if !exists('b:myhllines')
        let b:myhllines = {}
    endif

    let lnum = line('.')
    if has_key(b:myhllines, lnum)
        silent! call matchdelete(b:myhllines[lnum])
        unlet b:myhllines[lnum]
    else
        let matchid = matchadd('Search', '\%'.lnum.'l')
        let b:myhllines[lnum] = matchid
    endif
endfunction
function! ClearHighlightLines()
    if exists('b:myhllines')
        for value in values(b:myhllines)
            silent! call matchdelete(value)
        endfor
    endif
    let b:myhllines = {}
endfunction
nnoremap <silent> ml :call ToggleHighlightCurrentLine()<CR>
autocmd InsertEnter * call ClearHighlightLines()
"}}}
" }}}

" Custom FileType {{{
augroup customfiletype
    au!
    " Freemark template file
    au BufRead *.ftl set filetype=html
augroup END
"}}}

" Plugin Configs {{{
" UltiSnips {{{
let g:UltiSnipsNoPythonWarning     = 1
let g:UltiSnipsExpandTrigger       = "<C-O><C-O>"
let g:UltiSnipsListSnippets        = "<C-O><C-L>"
let g:UltiSnipsJumpForwardTrigger  = "<C-J>"
let g:UltiSnipsJumpBackwardTrigger = "<C-K>"
" }}}

" Nerdtree {{{
nnoremap <silent> gn :NERDTreeFind<CR>
nnoremap <silent> gN :NERDTree<CR>
let NERDTreeShowBookmarks = 1
let NERDTreeIgnore = ['\.pyc', '\~$', '\.swo$', '\.swp$']
let NERDTreeQuitOnOpen = 1
let NERDTreeBookmarksFile = $HOME.'/.vim-infos/NERDTreeBookmarks'
" }}}

" LeaderF {{{
let g:Lf_ShortcutF = '<C-P>'
let g:Lf_ShortcutB = '<C-B>'
let g:Lf_WindowPosition = 'popup'
let g:Lf_DefaultMode = 'NameOnly'
nnoremap <silent>gm :LeaderfMru<CR>
nnoremap <silent>gr :LeaderfFunction<CR>
nnoremap <silent>gR :LeaderfTag<CR>

let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}

if has("win32")
    let g:Lf_CacheDirectory = $HOME.'\_vim-infos\'
else
    let g:Lf_CacheDirectory = $HOME.'/.vim-infos/'
endif
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WildIgnore = {
        \ 'dir': ['.svn','.git','.hg', '.neocon', 'node_modules', 'bower_components', 'target'],
        \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
        \ }
" }}}

" undotree {{{
let g:undotree_SetFocusWhenToggle = 1
nnoremap <silent> <leader>u :UndotreeToggle<CR>
" }}}

" EasyMotion {{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_keys = 'asdghklqwertyuiopzxcvbnmfj'
let g:EasyMotion_smartcase = 1

nmap f <Plug>(easymotion-s2)
let easymotion_key_map = {
    \ 'zj': '<Plug>(easymotion-j)',
    \ 'zk': '<Plug>(easymotion-k)',
    \ 'zw': '<Plug>(easymotion-w)',
    \ 'zb': '<Plug>(easymotion-b)',
    \ 'zW': '<Plug>(easymotion-W)',
    \ 'zB': '<Plug>(easymotion-B)',
    \ 'ze': '<Plug>(easymotion-e)',
    \ 'zE': '<Plug>(easymotion-E)'
    \ }
for key in keys(easymotion_key_map)
    exec "nmap " . key . " " . easymotion_key_map[key]
    exec "vmap " . key . " " . easymotion_key_map[key]
    exec "omap " . key . " " . easymotion_key_map[key]
endfo
" }}}

" Fugitive {{{
nnoremap <silent> gs  :Git status<CR>
nnoremap <silent> gss :Git status<CR>
nnoremap <silent> gsb :Git blame<CR>
autocmd FileType fugitiveblame nmap <buffer> q gq
" }}}

" Tagbar {{{
let g:tagbar_left      = 1
let g:tagbar_width     = 30
let g:tagbar_sort      = 0
let g:tagbar_autoclose = 1
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
function! s:InvokeTB()
    if bufname("%") != "__Tagbar__"
        let s:previous_bufname = bufname("%")
        exec "TagbarOpen fj"
    else
        silent let s:previous_window = bufwinnr(s:previous_bufname)
        exec s:previous_window . "wincmd w"
    endif
endfunction
nnoremap <silent> gb :call <SID>InvokeTB()<CR>
" }}}

" Session {{{
if has('win32')
    let g:session_directory = $HOME . '\_vim-infos\vim-session'
else
    let g:session_directory = $HOME . '/.vim-infos/vim-session'
endif
let g:session_autoload = 'prompt'
let g:session_autosave = 'yes'
let g:session_command_aliases = 1
let g:session_default_to_last = 1
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names So SessionOpen<bang> <args>
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names Sc SessionClose<bang> <args>
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names Ss SessionSave<bang> <args>
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names Sd SessionDelete<bang> <args>
function! s:SessionCd(bang, path)
    exec 'SessionClose' . a:bang
    exec 'cd ' . a:path
    let session_name = fnamemodify(getcwd(), ':t')
    exec 'SessionSave' . a:bang . ' ' . session_name
endfunction
com! -bar -b -n=? -comp=file SessionCd call s:SessionCd(<q-bang>, <q-args>)
com! -bar -b -n=? -comp=file Scd SessionCd<bang> <args>
" }}}

" Quickrun {{{
if !exists('g:quickrun_config')
    let g:quickrun_config = {}
endif
let g:quickrun_config['c'] = {
\ 'type': 'c/gcc',
\ 'command': 'gcc',
\ 'exec': ['%c %o %s -o %s:p:r', '%s:p:r %a'],
\ 'tempfile': '%{tempname()}.c',
\ 'hook/sweep/files': '%S:p:r',
\ 'cmdopt': '-std=c99 -Wall'
\ }
let g:quickrun_config['perl'] = {
\ 'cmdopt': '-Ilib'
\ }
" }}}

" CommentReader {{{
let g:creader_session_file = $HOME.'/.vim-infos/vim_creader_session'
" }}}

" YouCompleteMe {{{
let g:ycm_min_num_identifier_candidate_chars  = 2
let g:ycm_key_list_select_completion          = ['<TAB>']
let g:ycm_key_list_previous_completion        = ['<S-TAB>']
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_add_preview_to_completeopt          = 0
let g:ycm_complete_in_comments                = 1
let g:ycm_complete_in_strings                 = 1
let g:ycm_seed_identifiers_with_syntax        = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1

" define custom triggers
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript,typescript,clojure,rust': ['re!\w{2}'],
            \ }
" }}}

" CtrlSF {{{
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
nnoremap <silent> <C-F>o :CtrlSFOpen<CR>
nnoremap <silent> <C-F>j :CtrlSFFocus<CR>
let g:ctrlsf_default_view_mode = 'normal'
let g:ctrlsf_compact_position = 'bottom_outside'
let g:ctrlsf_fold_result = 0
let g:ctrlsf_search_mode = 'async'
let g:ctrlsf_populate_qflist = 1
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_toggle_map_key = '\t'
let g:ctrlsf_extra_backend_args = {
    \ 'pt': '--global-gitignore'
    \ }
let g:ctrlsf_auto_focus = {
    \ 'at': 'start'
    \ }
let g:ctrlsf_extra_root_markers = ['.root']

" ignore trailing space
let g:extra_whitespace_ignored_filetypes = ['ctrlsf']

hi ctrlsfFilename guifg=#ffffff guibg=NONE guisp=NONE gui=bold ctermfg=30 ctermbg=NONE cterm=bold
" }}}

" vim-multiple-selection {{{
let g:multi_cursor_use_default_mapping = 0

" Default mapping
let g:multi_cursor_next_key='<C-N>'
let g:multi_cursor_prev_key='<C-U>'
let g:multi_cursor_skip_key='<C-X>'
let g:multi_cursor_quit_key='<Esc>'
" }}}

" vim-visual-multi {{{
let g:multi_cursor_use_default_mapping = 0

" Default mapping
let g:multi_cursor_next_key='<C-N>'
let g:multi_cursor_prev_key='<C-U>'
let g:multi_cursor_skip_key='<C-X>'
let g:multi_cursor_quit_key='<Esc>'
" }}}

" mark {{{
let g:mw_no_mappings = 1
nmap <silent> mm <Plug>MarkSet
vmap <silent> mm <Plug>MarkSet
nmap <silent> mc <Plug>MarkClear
nmap <silent> mn <Plug>MarkSearchAnyNext
nmap <silent> mN <Plug>MarkSearchAnyPrev
" }}}

" Buffet {{{
nmap <silent><expr> <leader>b &buftype ==# "" ? ":Bufferlist\r" : "\r"
" }}}

" vim-exchange {{{
let g:exchange_no_mappings = 1
nmap cx     <Plug>(Exchange)
nmap cxx    <Plug>(ExchangeLine)
xmap X      <Plug>(Exchange)
nmap <expr> <ESC> exists('b:exchange') ? "<Plug>(ExchangeClear)"  : "\<ESC>"
" }}}

" linediff {{{
let g:linediff_buffer_type = 'scratch'
vnoremap zd :Linediff<CR>
autocmd User LinediffBufferReady nnoremap <buffer> q :LinediffReset<CR>
" }}}

" delimitMate {{{
let g:delimitMate_expand_cr = 1

" Maps to overwrite custom maps for completion
imap <silent><expr> <Space> pumvisible() ? "\<C-Y>\<Space>" : "<Plug>delimitMateSpace"
imap <silent><expr> <CR>    pumvisible() ? "\<C-Y>\<CR>"    : "<Plug>delimitMateCR"
imap <silent><expr> <BS>    pumvisible() ? "\<BS>"          : "<Plug>delimitMateBS"

" language specific configuration
au FileType clojure let b:delimitMate_quotes = '"'
" }}}

" vim-clojure-static {{{
let g:clojure_align_multiline_strings = 0
let g:clojure_align_subforms = 0
" }}}

" vim-clojure-highlight {{{
au BufWritePost *.clj silent ClojureHighlightReferences
" }}}

" tComment {{{
let g:tcomment_maps = 0
nnoremap <silent> gc :TComment<CR>
vnoremap <silent> gc :TComment<CR>
" }}}

" racer {{{
let g:racer_cmd = '/Users/dyng/Workspace/racer/target/release/racer'
let $RUST_SRC_PATH="/usr/local/src/rust/src"
" }}}

" csv.vim {{{
let g:no_csv_maps = 1
" }}}

" vim-snippets {{{
let g:UltiSnipsSnippetDirectories=["UltiSnips"]
" }}}

" vimcdoe {{{
set helplang=cn
" }}}

" {{{ vim-javascript
let g:javascript_enable_domhtmlcss = 1
" }}}

" {{{ editorconfig-vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" }}}

" gutentags {{{
set statusline+=%{gutentags#statusline()}
" }}}

" {{{ vim-easy-align
xmap ga <Plug>(EasyAlign)*
nmap ga <Plug>(EasyAlign)*
" }}}

" {{{ vim-sandwich
runtime macros/sandwich/keymap/surround.vim
" }}}

" {{{ ale
let g:ale_linters = {
\   'beancount': [],
\}
" }}}

" {{{ vim-terminal-helper
let g:terminal_key = "<M-/>"
let g:terminal_kill = 1
let g:terminal_close = 1
let g:terminal_pos = "botright"
let g:terminal_height = 20
" }}}

" {{{ vimspector
let g:vimspector_enable_mappings = 'HUMAN'
" }}}
" }}}

" modeline {{{
" vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker spell:
