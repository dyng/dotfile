" Vi Nocompatible {{{
set nocompatible
" }}}

" Load Plugins {{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'dyng/auto_mkdir'
Plugin 'kien/ctrlp.vim'
Plugin 'JazzCore/ctrlp-cmatcher'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/mru.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'thinca/vim-quickrun'
Plugin 'dyng/CommentReader'
Plugin 'sjl/gundo.vim'
Plugin 'vim-scripts/matchit.zip'
Plugin 'majutsushi/tagbar'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-scripts/Rename'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-session'
Plugin 'godlygeek/tabular'
Plugin 'dyng/ctrlsf.vim'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'dyng/YankRing.vim'
Plugin 'mattn/emmet-vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'vim-scripts/Mark--Karkat'
Plugin 'tpope/vim-rsi'
Plugin 'sandeepcr529/Buffet.vim'
Plugin 'dyng/bufmru.vim'
Plugin 'tommcdo/vim-exchange'
Plugin 'dyng/linediff.vim'
Plugin 'vim-scripts/ReloadScript'
Plugin 'kshenoy/vim-signature'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'scrooloose/syntastic'
Plugin 'Raimondi/delimitMate'

" Language Specific Plugins
Plugin 'pangloss/vim-javascript'
Plugin 'me-vlad/python-syntax.vim'
Plugin 'digitaltoad/vim-jade'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'kchmck/vim-coffee-script'
Plugin 'motemen/xslate-vim'
Plugin 'fatih/vim-go'
Plugin 'wting/rust.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'clausreinke/typescript-tools.vim'
Plugin 'tpope/vim-fireplace'
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-clojure-highlight'

" Colorschemes
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'Pychimp/vim-luna'
Plugin 'sickill/vim-monokai'
Plugin 'w0ng/vim-hybrid'
Plugin 'sjl/badwolf'

" Documents
Plugin 'asins/vimcdoc'

call vundle#end()
filetype plugin indent on
" }}}

" Basic Config {{{
" Encoding & Language {{{
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,sjis,cp936,gb18030,big5,euc-jp,euc-kr,latin1
language message zh_CN.UTF-8
" }}}

" Indentation {{{
set magic
set ruler
set autoindent
set tabstop=8
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab
set display=lastline
" }}}

" Searching {{{
set incsearch
set ignorecase
set smartcase
" }}}

" View {{{
set backspace=indent,eol,start
set guioptions=
set hlsearch
set showmatch
set laststatus=2

set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%
autocmd FileType git*,help setlocal nolist

" Colorscheme
set background=dark
" }}}

" Buffer {{{
set hidden
" }}}

" IDE Feature {{{
syntax on
filetype plugin indent on
set modeline                 "modeline is by default disabled on Debian
set completeopt=longest,menu
set wildmenu
" }}}

" Completion Map {{{
inoremap <silent><expr> <Space> pumvisible() ? "\<C-Y>\<Space>" : "\<Space>"
inoremap <silent><expr> <CR>    pumvisible() ? "\<C-Y>\<CR>"    : "\<CR>"
inoremap <silent><expr> <Esc>   pumvisible() ? "\<C-Y>\<Esc>"   : "\<Esc>"
inoremap <silent><expr> <BS>    pumvisible() ? "\<C-E>\<BS>"    : "\<BS>"
" }}}

" Maps {{{
let mapleader = ','

" Move line start and end
noremap H ^
noremap L $
inoremap <Home> <C-O>g^
inoremap <End>  <c-O>g$
" Quick paging
nnoremap <Space> <C-D>
vnoremap <Space> <C-D>
" Copy to line end
nnoremap Y y$
" Cursor move
nnoremap <Down> gj
nnoremap <Up>   gk
inoremap <Down> <C-R>=pumvisible() ? "\<lt>Down>" : "\<lt>C-O>gj"<CR>
inoremap <Up>   <C-R>=pumvisible() ? "\<lt>Up>" : "\<lt>C-O>gk"<CR>

" Tab navigation
nnoremap <silent> <C-Tab> :tabnext<CR>

" Window switch
nnoremap <silent> <C-H> :wincmd h<CR>
nnoremap <silent> <C-J> :wincmd j<CR>
nnoremap <silent> <C-K> :wincmd k<CR>
nnoremap <silent> <C-L> :wincmd l<CR>
" Focus new splited window
nnoremap <silent> <C-W>s :wincmd s\|wincmd j<CR>
nnoremap <silent> <C-W>v :wincmd v\|wincmd l<CR>

" Nohlsearch
nnoremap <silent> <F2>      :nohlsearch \| call ClearHighlightLines()<CR>
inoremap <silent> <F2> <C-O>:nohlsearch \| call ClearHighlightLines()<CR>
" n always look forward && N always look backward
nnoremap <expr> n v:searchforward ? "n" : "N"
nnoremap <expr> N v:searchforward ? "N" : "n"

" Shift lines leftwards or rightwards
vnoremap <expr> > v:count ? ">" : ">gv"
vnoremap <expr> < v:count ? "<" : "<gv"

" Win-style copy&paste shortcuts
xnoremap <C-C> "+y
nnoremap <C-Q> "+p
inoremap <C-Q> <C-R>+
cnoremap <C-Q> <C-R>+
" Copy filename
nnoremap <silent> yf :let @+ = expand('%')<CR>
nnoremap <silent> yF :let @+ = expand('%:p')<CR>
" Run current line
nnoremap <silent> yr :exec getline('.') \| echo 'executed!'<CR>
" Shell-style shortcut in command mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-d> <Del>
cnoremap <C-h> <BackSpace>

" Auto unfolding
nnoremap n nzv
nnoremap N Nzv

" Quickfix mode
nnoremap <silent><expr> ej        empty(getloclist(0)) ? ":cnext\<CR>" : ":lnext\<CR>"
nnoremap <silent><expr> ek        empty(getloclist(0)) ? ":cprev\<CR>" : ":lprev\<CR>"
nnoremap <silent><expr> <leader>e empty(getloclist(0)) ? ":cwind\<CR>" : ":lwind\<CR>"

" Correct spell
cab Q q
cab Qa qa
cab W w
cab Wq wq
cab Wa wa
cab X x
" }}}

" Misc {{{
" disable beeping
set vb t_vb=
" }}}
" }}}

" Custom Functions {{{
" Highlight current line {{{
function! ToggleHighlightCurrentLine()
    if !exists('b:myhllines')
        let b:myhllines = {}
    endif

    let lnum = line('.')
    if has_key(b:myhllines, lnum)
        silent! call matchdelete(b:myhllines[lnum])
        unlet b:myhllines[lnum]
    else
        let matchid = matchadd('Search', '\%'.lnum.'l')
        let b:myhllines[lnum] = matchid
    endif
endfunction
function! ClearHighlightLines()
    if exists('b:myhllines')
        for value in values(b:myhllines)
            silent! call matchdelete(value)
        endfor
    endif
    let b:myhllines = {}
endfunction
nnoremap <silent> ml :call ToggleHighlightCurrentLine()<CR>
autocmd InsertEnter * call ClearHighlightLines()
"}}}
" }}}

" Custom FileType {{{
augroup customfiletype
    au!
    " Freemark template file
    au BufRead *.ftl set filetype=html
augroup END
"}}}

" Plugin Configs {{{
" UltiSnips {{{
let g:UltiSnipsNoPythonWarning     = 1
let g:UltiSnipsExpandTrigger       = "<C-O><C-O>"
let g:UltiSnipsListSnippets        = "<C-O>"
let g:UltiSnipsJumpForwardTrigger  = "<C-J>"
let g:UltiSnipsJumpBackwardTrigger = "<C-K>"
" }}}

" {{{ bufmru
" config
let g:bufmru_max_buffer_num = 8
" }}}

" Nerdtree {{{
nnoremap <silent> gn :NERDTreeFind<CR>
nnoremap <silent> gN :NERDTree<CR>
let NERDTreeShowBookmarks = 1
let NERDTreeIgnore = ['\.pyc', '\~$', '\.swo$', '\.swp$']
let NERDTreeQuitOnOpen = 1
let NERDTreeBookmarksFile = $HOME.'/.vim-infos/NERDTreeBookmarks'
" }}}

" ctrlp {{{
" extensions
let g:ctrlp_extensions = ['tag', 'buffertag', 'rtscript']

" use ctrlp-cmatcher
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }

nnoremap <silent> <C-P> :CtrlPRoot<CR>
nnoremap <silent> <C-B> :CtrlPBuffer<CR>
nnoremap <silent> <C-E> :CtrlPBufTag<CR>
nnoremap <silent> tp    :exec 'CtrlP ' . getcwd()<CR>
nnoremap <silent> tt    :CtrlPTag<CR>
nnoremap <silent> <leader>p :ClearCtrlPCache<CR>
let g:ctrlp_working_path_mode = 'rc'
let g:ctrlp_max_files = 30000
let g:ctrlp_mruf_max = 800
let g:ctrlp_mruf_case_sensitive = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v(\.neocon|\.git|\.hg|\.svn|node_modules|bower_components|local|target)',
  \ 'file': '\.exe$\|\.so$\|\.dll$\|\.sw[po]$',
  \ 'link': '',
  \ }
" }}}

" yankring {{{
let g:yankring_map_dot = 0
let g:yankring_min_element_length = 2
if has('win32')
    let g:yankring_history_dir = $HOME.'\_vim-infos\'
else
    let g:yankring_history_dir = $HOME.'/.vim-infos/'
endif
" release default mapped keys
function! YRRunAfterMaps()
    nnoremap <silent> gp    :YRShow<CR>
    inoremap <silent> <C-P> <Esc>:YRShow<CR>

    " keys conflict with CtrlP
    nnoremap <silent> <C-P> :CtrlPRoot<CR>
endfunction
" }}}

" gundo {{{
let g:gundo_close_on_revert = 1
nnoremap <silent> <leader>u :GundoToggle<CR>
" }}}

" EasyMotion {{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_keys = 'asdghklqwertyuiopzxcvbnmfj'

nmap zf <Plug>(easymotion-s)
nmap zz <Plug>(easymotion-s2)
nmap zj <Plug>(easymotion-j)
nmap zk <Plug>(easymotion-k)
nmap zw <Plug>(easymotion-w)
nmap zb <Plug>(easymotion-b)
nmap zW <Plug>(easymotion-W)
nmap zB <Plug>(easymotion-B)
nmap ze <Plug>(easymotion-e)
nmap zE <Plug>(easymotion-E)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1
" }}}

" Tabular {{{
nnoremap <silent> <leader>= :Tabularize /=<CR>
vnoremap <silent> <leader>= :Tabularize /=<CR>
nnoremap <silent> <leader>: :Tabularize /:<CR>
vnoremap <silent> <leader>: :Tabularize /:<CR>
nnoremap <silent> <leader>> :Tabularize /=><CR>
vnoremap <silent> <leader>> :Tabularize /=><CR>
" }}}

" Fugitive {{{
nnoremap <silent> gs  :Gstatus<CR>
nnoremap <silent> gss :Gstatus<CR>
nnoremap <silent> gsb :Gblame<CR>
" }}}

" Vundle {{{
nnoremap <leader>v :PluginList<CR>
" }}}

" Tagbar {{{
let g:tagbar_left      = 1
let g:tagbar_width     = 30
let g:tagbar_sort      = 0
let g:tagbar_autoclose = 1
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
function! s:InvokeTB()
    if bufname("%") != "__Tagbar__"
        let s:previous_bufname = bufname("%")
        exec "TagbarOpen fj"
    else
        silent let s:previous_window = bufwinnr(s:previous_bufname)
        exec s:previous_window . "wincmd w"
    endif
endfunction
nnoremap <silent> gb :call <SID>InvokeTB()<CR>
" }}}

" Session {{{
if has('win32')
    let g:session_directory = $HOME . '\_vim-infos\vim-session'
else
    let g:session_directory = $HOME . '/.vim-infos/vim-session'
endif
let g:session_autoload = 'prompt'
let g:session_autosave = 'yes'
let g:session_command_aliases = 1
let g:session_default_to_last = 1
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names So SessionOpen<bang> <args>
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names Sc SessionClose<bang> <args>
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names Ss SessionSave<bang> <args>
com! -bar -b -n=? -comp=customlist,xolox#session#complete_names Sd SessionDelete<bang> <args>
function! s:SessionCd(bang, path)
    exec 'SessionClose' . a:bang
    exec 'cd ' . a:path
    let session_name = fnamemodify(getcwd(), ':t')
    exec 'SessionSave' . a:bang . ' ' . session_name
endfunction
com! -bar -b -n=? -comp=file SessionCd call s:SessionCd(<q-bang>, <q-args>)
com! -bar -b -n=? -comp=file Scd SessionCd<bang> <args>
" }}}

" MRU {{{
if has('win32')
    let MRU_File = $HOME.'\_vim-infos\vim_mru_files'
else
    let MRU_File = $HOME.'/.vim-infos/vim_mru_files'
endif
let MRU_Add_Menu = 0
nnoremap <silent>gm :MRU<CR>
" }}}

" Quickrun {{{
if !exists('g:quickrun_config')
    let g:quickrun_config = {}
endif
let g:quickrun_config['c'] = {
\ 'type': 'c/gcc',
\ 'command': 'gcc',
\ 'exec': ['%c %o %s -o %s:p:r', '%s:p:r %a'],
\ 'tempfile': '%{tempname()}.c',
\ 'hook/sweep/files': '%S:p:r',
\ 'cmdopt': '-std=c99 -Wall'
\ }
let g:quickrun_config['perl'] = {
\ 'cmdopt': '-Ilib'
\ }
" }}}

" CommentReader {{{
let g:creader_session_file = $HOME.'/.vim-infos/vim_creader_session'
nnoremap <F8> :CRtoggle<CR>
" }}}

" Airline {{{
let g:airline_theme = 'laederon'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
" }}}

" NERDCommenter {{{
let g:NERDSpaceDelims = 1
nmap gc <Plug>NERDCommenterToggle
vmap gc <Plug>NERDCommenterToggle
nmap gC <Plug>NERDCommenterSexy
vmap gC <Plug>NERDCommenterSexy
" }}}

" python-syntax {{{
let python_highlight_builtin_objs  = 1
let python_highlight_builtin_funcs = 1
let python_highlight_exceptions    = 1
let python_print_as_function       = 1
" }}}

" easytags {{{
let g:easytags_auto_update = 0
let g:easytags_auto_highlight = 0
let g:easytags_dynamic_files = 1
let g:easytags_by_filetype = '~/.tags/'
let g:easytags_file = '~/.tags/default'
" }}}

" YouCompleteMe {{{
let g:ycm_server_keep_logfiles                = 1
let g:ycm_key_list_select_completion          = ['<TAB>']
let g:ycm_key_list_previous_completion        = ['<S-TAB>']
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_add_preview_to_completeopt          = 0
let g:ycm_complete_in_comments                = 1
let g:ycm_seed_identifiers_with_syntax        = 1
let g:ycm_collect_identifiers_from_tags_files = 1

" define custom triggers
let g:ycm_semantic_triggers = {
    \ 'typescript': ['.'],
    \ 'clojure':    ['/', '.'],
    \ }

" }}}

" CtrlSF {{{
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>c :CtrlSFClose<CR>
let g:ctrlsf_ignore = ['node_modules', 'bower_components']
let g:ctrlsf_default_root = 'project'
" }}}

" vim-multiple-selection {{{
let g:multi_cursor_use_default_mapping = 0

" Default mapping
let g:multi_cursor_next_key='<C-D>'
let g:multi_cursor_prev_key='<C-U>'
let g:multi_cursor_skip_key='<C-X>'
let g:multi_cursor_quit_key='<Esc>'
" }}}

" {{{ syntastic
nnoremap <silent> <F9>      :SyntasticToggleMode<CR>
inoremap <silent> <F9>      <C-O>:SyntasticToggleMode<CR>
nnoremap <silent> <leader>E :Errors<CR>

let g:syntastic_mode_map = {
\ 'mode': 'active',
\ 'active_filetypes':  [],
\ 'passive_filetypes': ['html', 'java']
\ }

let g:syntastic_always_populate_loc_list = 1
let syntastic_enable_signs = 1

" perl
let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_checkers = ['perl', 'podchecker']
" }}}

" {{{ mark
nmap mm <Plug>MarkSet
vmap mm <Plug>MarkSet
nmap mr <Plug>MarkRegex
vmap mr <Plug>MarkRegex
nmap mc <Plug>MarkClear
nmap mC <Plug>MarkAllClear
nmap m* <Plug>MarkSearchAnyNext
nmap m# <Plug>MarkSearchAnyPrev
nmap mn <Plug>MarkSearchAnyNext
nmap mN <Plug>MarkSearchAnyPrev
" }}}

" {{{ Buffet
nmap <silent><expr> <CR> &buftype ==# "" ? ":Bufferlist\r" : "\r"
" }}}

" {{{ exchange
let g:exchange_no_mappings = 1
nmap w     <Plug>(Exchange)
nmap ww    <Plug>(ExchangeLine)
xmap w     <Plug>(Exchange)
nmap <ESC> <Plug>(ExchangeClear)
" }}}

" {{{ vim-go
let g:go_fmt_fail_silently = 1
" }}}

" linediff {{{
let g:linediff_buffer_type = 'scratch'
vnoremap zd :Linediff<CR>
" }}}

" delimitMate {{{
let g:delimitMate_expand_cr = 1

" Maps to overwrite custom maps for completion
imap <silent><expr> <Space> pumvisible() ? "\<C-Y>\<Space>" : "<Plug>delimitMateSpace"
imap <silent><expr> <CR>    pumvisible() ? "\<C-Y>\<CR>"    : "<Plug>delimitMateCR"
imap <silent><expr> <BS>    pumvisible() ? "\<C-E>\<BS>"    : "<Plug>delimitMateBS"

" language specific configuration
au FileType clojure let b:delimitMate_quotes = '"'
" }}}

" fireplace {{{
nnoremap cpe :%Eval<CR>
" }}}

" vim-clojure-static {{{
let g:clojure_align_multiline_strings = 0
let g:clojure_align_subforms = 0
" }}}

" vim-clojure-highlight {{{
au BufWritePost *.clj silent ClojureHighlightReferences
" }}}

" vimcdoe {{{
set helplang=cn
" }}}
" }}}

" modeline {{{
" vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker spell:
