# profiling flag, set 1 if needed
PROFILING=

if [[ $PROFILING ]]; then
    zmodload zsh/zprof
fi

### oh-my-zsh {{{
### DEPRECATED ###
ZSH=$HOME/.oh-my-zsh
CASE_SENSITIVE="false"
DISABLE_AUTO_UPDATE="true"
COMPLETION_WAITING_DOTS="true"
# }}}

### zplug {{{
export ZPLUG_HOME=$HOME/.zplug

# Install zplug if necessary
if [[ ! -d $ZPLUG_HOME ]]; then
    git clone https://github.com/zplug/zplug $ZPLUG_HOME
fi

# Init
source $ZPLUG_HOME/init.zsh

setopt prompt_subst

# enable bash-compatible completion
autoload bashcompinit
bashcompinit

zplug 'zplug/zplug', hook-build:'zplug --self-manage'
zplug "lib/completion", from:oh-my-zsh
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/gitfast", from:oh-my-zsh
zplug "plugins/git-extras", from:oh-my-zsh
zplug "plugins/brew", from:oh-my-zsh
zplug "plugins/mvn", from:oh-my-zsh
zplug "plugins/docker", from:oh-my-zsh
zplug "supercrabtree/k"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "djui/alias-tips"
zplug "rupa/z", use:z.sh
zplug "zsh-users/zsh-autosuggestions"
zplug "reegnz/jq-zsh-plugin"

# Theme
# zplug "caiogondim/bullet-train.zsh", use:bullet-train.zsh-theme, defer:3
# If you prefer a minimal theme
zplug mafredri/zsh-async
zplug sindresorhus/pure, use:pure.zsh, as:theme

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load
# }}}

### Global {{{

# functions {{{
run_if_script_exists() {
    if [[ -e $1 ]]; then
        source $1
    fi
}
# }}}

# set locale
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# load iterm2-shell-integration
if [[ ! -e $HOME/.iterm2_shell_integration.zsh ]]; then
    printf "Install iterm2 shell integration? [y/N]: "
    if read -q; then
        echo
        curl -L https://iterm2.com/shell_integration/install_shell_integration.sh | bash
    fi
fi
run_if_script_exists $HOME/.iterm2_shell_integration.zsh

# }}}

### Key binding {{{
bindkey -e # use emacs keybinding

# use pattern in history search
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward
bindkey '^K' history-substring-search-up
bindkey '^J' history-substring-search-down
#}}}

### Plugin Config {{{

# bullet-train
BULLETTRAIN_DIR_EXTENDED=2
BULLETTRAIN_PROMPT_ORDER=(
  status
  time
  dir
  git
)

#}}}

### Environment {{{
export EDITOR="vim"
# }}}

### History {{{
HISTFILE=~/.zsh_history
HISTSIZE=20000
SAVEHIST=20000
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt share_history
# }}}

### PATH {{{
# add script dir
export PATH="$PATH:$HOME/scripts"

# Homebrew
if [[ -e /usr/local/bin/brew ]]; then
    # add brew bin path
    export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

    # set root Application as default target
    export HOMEBREW_CASK_OPTS="--appdir=/Applications"

    # set ustc as alternative repo
    export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
fi

if [[ -e /opt/homebrew/bin/brew ]]; then
    eval $(/opt/homebrew/bin/brew shellenv)

    # set ustc as alternative repo
    export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
fi

export HOMEBREW_BUNDLE_FILE=$HOME/.Brewfile

# fzf
if which fzf &>/dev/null; then
    source $HOME/.fzf.zsh
    export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim {})+abort'"

    # preview command
    if which bat &>/dev/null; then
        alias preview="fzf --preview 'bat --color \"always\" {}'"
    else
        alias preview="fzf --preview 'cat {}'"
    fi

    # use fd if available
    if which fd &>/dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f'
    fi
fi

# }}}

### Alias {{{
# Regular Alias
alias -r ls="ls -FG"
alias -r ll="ls -lAhFG"
alias -r la="ls -aTlFGh"
alias -r lr="ls -Rlh"
alias -r lR="ls -RAlh"
alias -r diff="diff -u"
alias -r stat="stat -x"

# Git Alias
alias -r gd="git diff"
alias -r gds="git diff --staged"
alias -r gstu="git stash save -u"

# Less Alias
alias -r less="less -i" # case-insensitive

# Tig Alias
alias -r tia="tig --all"
alias -r tis="tig status"

# Global Alias
alias -g /J='| jq .'
alias -g /L='| less'
alias -g /H='| head'
alias -g /T='| tail'
alias -g /G='| grep'
alias -g /A="&& terminal-notifier -message 'done'"

# Fixture Alias
alias -r ssh="TERM=xterm ssh"

# Misc
if which gdu &>/dev/null; then
    alias du="gdu"
fi

# Fd
fdo() {
    fd $1 -X vim {}
}

# Docker
drun() {
    docker run -it $1 /bin/bash
}

dexec() {
    docker exec -it $1 /bin/bash
}

# VSCode
function code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*; }
# }}}

### Utils {{{

# Insert Unicode Character
autoload insert-unicode-char
zle -N insert-unicode-char
bindkey '^Xi' insert-unicode-char

# Load Utils Scripts
if [[ -d $HOME/extensions ]]; then
    for f in $(find -L $HOME/extensions -type f -name '*.sh')
    do
        source $f
    done
fi

# Set&Unset Proxy
set_proxy() {
    export HTTP_PROXY=http://127.0.0.1:1081
    export HTTPS_PROXY=http://127.0.0.1:1081
    echo 'Set proxy successfully!'
}

unset_proxy() {
    unset HTTP_PROXY
    unset HTTPS_PROXY
    echo 'Unset proxy successfully!'
}

# Make less readable
export LESS="-XFR"

# }}}

### App Init {{{

# Docker (for mac only)
if hash docker-machine &>/dev/null; then
    if [[ $(docker-machine status default 2>/dev/null) == "Running" ]]; then
        eval "$(docker-machine env default)"
    fi
fi

# thefuck
if hash thefuck &>/dev/null; then
    eval "$(thefuck --alias)"
fi

# GPG
if hash gpg &>/dev/null; then
    GPG_TTY=$(tty)
    export GPG_TTY
fi

# neovim
if which nvim &>/dev/null; then
    export EDITOR="nvim"
    alias vim="nvim"
fi

# }}}

### Extra Config {{{
if [[ -d $HOME/.shrc_d ]]; then
    for rc in $HOME/.shrc_d/*
    do
        if [[ -f $rc ]]; then
            . $rc
        fi
    done
fi
# }}}

if [[ $PROFILING ]]; then
    zprof
fi
# vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker spell:
